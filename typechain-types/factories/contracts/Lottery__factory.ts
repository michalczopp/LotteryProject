/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Lottery, LotteryInterface } from "../../contracts/Lottery";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "betsClosingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "betsOpen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "closingTime",
        type: "uint256",
      },
    ],
    name: "openBets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107a58061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806318c3496514610067578063715018a6146100855780638da5cb5b1461008f578063990a49f5146100ad578063d1b258ff146100c9578063f2fde38b146100e7575b600080fd5b61006f610103565b60405161007c91906103fe565b60405180910390f35b61008d610109565b005b61009761011d565b6040516100a4919061045a565b60405180910390f35b6100c760048036038101906100c291906104a6565b610146565b005b6100d1610205565b6040516100de91906104ee565b60405180910390f35b61010160048036038101906100fc9190610535565b610218565b005b60015481565b61011161029b565b61011b6000610319565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060149054906101000a900460ff1615610196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018d906105bf565b60405180910390fd5b61019e61029b565b4281116101e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d790610651565b60405180910390fd5b806001819055506001600060146101000a81548160ff02191690831515021790555050565b600060149054906101000a900460ff1681565b61022061029b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361028f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610286906106e3565b60405180910390fd5b61029881610319565b50565b6102a36103dd565b73ffffffffffffffffffffffffffffffffffffffff166102c161011d565b73ffffffffffffffffffffffffffffffffffffffff1614610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030e9061074f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b6103f8816103e5565b82525050565b600060208201905061041360008301846103ef565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044482610419565b9050919050565b61045481610439565b82525050565b600060208201905061046f600083018461044b565b92915050565b600080fd5b610483816103e5565b811461048e57600080fd5b50565b6000813590506104a08161047a565b92915050565b6000602082840312156104bc576104bb610475565b5b60006104ca84828501610491565b91505092915050565b60008115159050919050565b6104e8816104d3565b82525050565b600060208201905061050360008301846104df565b92915050565b61051281610439565b811461051d57600080fd5b50565b60008135905061052f81610509565b92915050565b60006020828403121561054b5761054a610475565b5b600061055984828501610520565b91505092915050565b600082825260208201905092915050565b7f4c6f7474657279206973206f70656e0000000000000000000000000000000000600082015250565b60006105a9600f83610562565b91506105b482610573565b602082019050919050565b600060208201905081810360008301526105d88161059c565b9050919050565b7f436c6f73696e672074696d65206d75737420626520696e20746865206675747560008201527f7265000000000000000000000000000000000000000000000000000000000000602082015250565b600061063b602283610562565b9150610646826105df565b604082019050919050565b6000602082019050818103600083015261066a8161062e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006106cd602683610562565b91506106d882610671565b604082019050919050565b600060208201905081810360008301526106fc816106c0565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610739602083610562565b915061074482610703565b602082019050919050565b600060208201905081810360008301526107688161072c565b905091905056fea26469706673582212206f5d584f415cfd974868d9b746848458ab89e3866aba43a74f75e111488ab72464736f6c63430008130033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
